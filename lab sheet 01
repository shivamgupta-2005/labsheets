1Ô∏è‚É£ String Reversal
#include <stdio.h>
#include <string.h>

int main() {
    char str[100], temp;
    int i, j;
    printf("Enter a string: ");
    gets(str);
    j = strlen(str) - 1;
    
    for(i = 0; i < j; i++, j--) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }
    
    printf("Reversed string: %s", str);
    return 0;
}

2Ô∏è‚É£ Replacing Substrings
#include <stdio.h>
#include <string.h>

int main() {
    char str[200], find[50], replace[50], result[200];
    int i = 0, j = 0, k;
    
    printf("Enter main string: ");
    gets(str);
    printf("Enter substring to replace: ");
    gets(find);
    printf("Enter new substring: ");
    gets(replace);3Ô∏è‚É£ Searching for an Element (Linear Search)

    while(str[i] != '\0') {
        if(strncmp(&str[i], find, strlen(find)) == 0) {
            strcat(result, replace);
            i += strlen(find);
        } else {
            strncat(result, &str[i], 1);
            i++;
        }
    }
    printf("Modified string: %s", result);
    return 0;
}

3Ô∏è‚É£ Searching for an Element (Linear Search)
#include <stdio.h>

int main() {
    int arr[10], n, key, found = 0;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    printf("Enter elements: ");
    for(int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    printf("Enter value to search: ");
    scanf("%d", &key);

    for(int i = 0; i < n; i++) {
        if(arr[i] == key) {
            printf("Element found at position %d\n", i+1);
            found = 1;
            break;
        }
    }

    if(!found)
        printf("Element not found.");
    return 0;
}

4Ô∏è‚É£ Sorting an Array (Bubble Sort)
#include <stdio.h>

int main() {
    int arr[10], n, temp;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    printf("Enter elements: ");
    for(int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    for(int i = 0; i < n-1; i++) {
        for(int j = 0; j < n-i-1; j++) {
            if(arr[j] > arr[j+1]) {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }

    printf("Sorted array: ");
    for(int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}


5Ô∏è‚É£ Reversing an Array

#include <stdio.h>
int main() {
    int arr[100], n, temp;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    for(int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    for(int i = 0, j = n-1; i < j; i++, j--) {
        temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    printf("Reversed array: ");
    for(int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}

6Ô∏è‚É£ Removing Duplicates
#include <stdio.h>

int main() {
    int arr[100], n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    for(int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    printf("Array without duplicates: ");
    for(int i = 0; i < n; i++) {
        int flag = 0;
        for(int j = 0; j < i; j++) {
            if(arr[i] == arr[j]) {
                flag = 1;
                break;
            }
        }
        if(flag == 0)
            printf("%d ", arr[i]);
    }
    return 0;
}

7Ô∏è‚É£ Merging Two Sorted Arrays
#include <stdio.h>

int main() {
    int a[10], b[10], c[20], n1, n2, i=0, j=0, k=0;
    printf("Enter size of first array: ");
    scanf("%d", &n1);
    printf("Enter sorted elements of first array: ");
    for(i=0; i<n1; i++) scanf("%d", &a[i]);

    printf("Enter size of second array: ");
    scanf("%d", &n2);
    printf("Enter sorted elements of second array: ");
    for(i=0; i<n2; i++) scanf("%d", &b[i]);

    i=j=k=0;
    while(i<n1 && j<n2) {
        if(a[i] < b[j]) c[k++] = a[i++];
        else c[k++] = b[j++];
    }
    while(i<n1) c[k++] = a[i++];
    while(j<n2) c[k++] = b[j++];

    printf("Merged array: ");
    for(i=0; i<k; i++) printf("%d ", c[i]);
    return 0;
}

8Ô∏è‚É£ Reading from a Text File
#include <stdio.h>

int main() {
    FILE *fp;
    char ch;
    fp = fopen("input.txt", "r");
    if(fp == NULL) {
        printf("File not found!");
        return 0;
    }
    while((ch = fgetc(fp)) != EOF)
        putchar(ch);
    fclose(fp);
    return 0;
}

9Ô∏è‚É£ Copying Files
#include <stdio.h>

int main() {
    FILE *src, *dest;
    char ch;
    src = fopen("source.txt", "r");
    dest = fopen("copy.txt", "w");

    if(src == NULL || dest == NULL) {
        printf("File error!");
        return 0;
    }

    while((ch = fgetc(src)) != EOF)
        fputc(ch, dest);

    printf("File copied successfully!");
    fclose(src);
    fclose(dest);
    return 0;
}

üîü Searching within a File
#include <stdio.h>
#include <string.h>

int main() {
    FILE *fp;
    char word[50], str[200];
    int found = 0;
    fp = fopen("data.txt", "r");
    if(fp == NULL) {
        printf("File not found!");
        return 0;
    }
    printf("Enter word to search: ");
    scanf("%s", word);

    while(fgets(str, 200, fp)) {
        if(strstr(str, word)) {
            printf("Word found in: %s", str);
            found = 1;
        }
    }
    if(!found)
        printf("Word not found in file.");
    fclose(fp);
    return 0;
}



  PROJECT BASED TASKS

1Ô∏è‚É£ Calculator
#include <stdio.h>

int main() {
    char op;
    double a, b;
    printf("Enter operator (+, -, *, /): ");
    scanf(" %c", &op);
    printf("Enter two numbers: ");
    scanf("%lf %lf", &a, &b);

    switch(op) {
        case '+': printf("Result = %.2lf", a + b); break;
        case '-': printf("Result = %.2lf", a - b); break;
        case '*': printf("Result = %.2lf", a * b); break;
        case '/': printf("Result = %.2lf", a / b); break;
        default: printf("Invalid operator");
    }
    return 0;
}

2Ô∏è‚É£ Number Guessing Game

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int number, guess, attempts = 0;
    srand(time(0));
    number = rand() % 100 + 1;

    do {
        printf("Guess the number (1-100): ");
        scanf("%d", &guess);
        attempts++;
        if(guess > number) printf("Too high!\n");
        else if(guess < number) printf("Too low!\n");
        else printf("Correct! You guessed in %d attempts.\n", attempts);
    } while(guess != number);
    return 0;
}

  3Ô∏è‚É£ Tic-Tac-Toe

#include <stdio.h>

char board[3][3];
void printBoard() {
    for(int i=0;i<3;i++) {
        for(int j=0;j<3;j++) printf(" %c ", board[i][j]);
        printf("\n");
    }
}

int main() {
    int r, c, moves=0, player=1;
    for(int i=0;i<3;i++) for(int j=0;j<3;j++) board[i][j]='-';
    while(moves<9) {
        printBoard();
        printf("Player %d enter row and column: ", player);
        scanf("%d%d", &r, &c);
        if(board[r][c]=='-') {
            board[r][c] = (player==1)?'X':'O';
            player = 3 - player;
            moves++;
        } else printf("Spot taken!\n");
    }
    printBoard();
    printf("Game Over!");
    return 0;
}

4Ô∏è‚É£ Hangman Game (Simple Version)

#include <stdio.h>
#include <string.h>

int main() {
    char word[] = "APPLE", guess[10];
    int len = strlen(word), chances = 5, correct = 0;
    char display[10] = {'_', '_', '_', '_', '_', '\0'};
    
    while(chances > 0 && correct < len) {
        printf("\nWord: %s\nGuess a letter: ", display);
        scanf(" %c", guess);
        int found = 0;
        for(int i=0;i<len;i++) {
            if(word[i] == guess[0]) {
                display[i] = word[i];
                found = 1;
                correct++;
            }
        }
        if(!found) chances--;
    }
    if(correct == len) printf("You won! Word is %s", word);
    else printf("You lost! Word was %s", word);
    return 0;
}

5Ô∏è‚É£ Quiz Game
#include <stdio.h>

int main() {
    int score = 0, ans;
    printf("Q1. What is the capital of India?\n1.Delhi  2.Mumbai  3.Kolkata\n");
    scanf("%d", &ans);
    if(ans == 1) score++;

    printf("Q2. Which language is used in C programming?\n1.Python  2.Java  3.C\n");
    scanf("%d", &ans);
    if(ans == 3) score++;

    printf("Q3. 5 + 3 = ?\n1.7  2.8  3.9\n");
    scanf("%d", &ans);
    if(ans == 2) score++;

    printf("Your score: %d/3", score);
    return 0;
}





